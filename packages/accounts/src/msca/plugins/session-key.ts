import { type GetFunctionArgs, encodeFunctionData } from "viem";
import type { Plugin } from "./types";
import type { BaseSmartContractAccount } from "@alchemy/aa-core";

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC6900PluginGen: This file is auto-generated by plugingen
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const SessionKeyPlugin_ = {
  meta: {
    name: "Session Key Plugin",
    version: "1.0.0",
  },
  accountDecorators: (account: BaseSmartContractAccount) => ({
    encodeExecuteWithSessionKeyData: ({
      args,
    }: GetFunctionArgs<
      typeof SessionKeyPluginExecutionFunctionAbi,
      "executeWithSessionKey"
    >) => {
      return encodeFunctionData({
        abi: SessionKeyPluginExecutionFunctionAbi,
        functionName: "executeWithSessionKey",
        args,
      });
    },

    encodeGetSessionKeysData: () => {
      return encodeFunctionData({
        abi: SessionKeyPluginExecutionFunctionAbi,
        functionName: "getSessionKeys",
      });
    },

    readGetSessionKeys: async () => {
      return account.rpcProvider.readContract({
        address: await account.getAddress(),
        abi: SessionKeyPluginExecutionFunctionAbi,
        functionName: "getSessionKeys",
      });
    },

    encodeIsSessionKeyData: ({
      args,
    }: GetFunctionArgs<
      typeof SessionKeyPluginExecutionFunctionAbi,
      "isSessionKey"
    >) => {
      return encodeFunctionData({
        abi: SessionKeyPluginExecutionFunctionAbi,
        functionName: "isSessionKey",
        args,
      });
    },

    readIsSessionKey: async ({
      args,
    }: GetFunctionArgs<
      typeof SessionKeyPluginExecutionFunctionAbi,
      "isSessionKey"
    >) => {
      return account.rpcProvider.readContract({
        address: await account.getAddress(),
        abi: SessionKeyPluginExecutionFunctionAbi,
        functionName: "isSessionKey",
        args,
      });
    },

    encodeUpdateSessionKeysData: ({
      args,
    }: GetFunctionArgs<
      typeof SessionKeyPluginExecutionFunctionAbi,
      "updateSessionKeys"
    >) => {
      return encodeFunctionData({
        abi: SessionKeyPluginExecutionFunctionAbi,
        functionName: "updateSessionKeys",
        args,
      });
    },
  }),
};

export const SessionKeyPlugin: Plugin<
  ReturnType<(typeof SessionKeyPlugin_)["accountDecorators"]>
> = SessionKeyPlugin_;

export const SessionKeyPluginExecutionFunctionAbi = [
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "calls",
        internalType: "struct Call[]",
        type: "tuple[]",
        components: [
          { name: "target", internalType: "address", type: "address" },
          { name: "value", internalType: "uint256", type: "uint256" },
          { name: "data", internalType: "bytes", type: "bytes" },
        ],
      },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "executeWithSessionKey",
    outputs: [{ name: "", internalType: "bytes[]", type: "bytes[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getSessionKeys",
    outputs: [{ name: "", internalType: "address[]", type: "address[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "sessionKey", internalType: "address", type: "address" }],
    name: "isSessionKey",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "sessionKeysToAdd",
        internalType: "address[]",
        type: "address[]",
      },
      {
        name: "sessionKeysToRemove",
        internalType: "struct ISessionKeyPlugin.SessionKeyToRemove[]",
        type: "tuple[]",
        components: [
          { name: "sessionKey", internalType: "address", type: "address" },
          { name: "predecessor", internalType: "bytes32", type: "bytes32" },
        ],
      },
    ],
    name: "updateSessionKeys",
    outputs: [],
  },
] as const;
